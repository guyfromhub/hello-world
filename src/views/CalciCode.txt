<template>
  <div class="flex flex-col items-center justify-center w-screen h-screen bg-blue-200">
    <div class="text-white *:bg-slate-800 w-1/4 text-3xl">
      <div class="border border-red-600 *:border *:border-black flex flex-col rounded-t-lg overflow-hidden text-right">
        <input v-model="expression" placeholder="Enter your values here..." class="h-10 p-2 text-right bg-slate-800">
        <p class="h-10 p-2"> {{ result }} </p>
      </div>
      <div class="grid grid-flow-row grid-cols-3">
        <button class="px-4 border border-red-600 " @click="getNumber(n)" v-for="n in 9" :key="n">{{ n }}</button>
      </div>
      <button class="w-full px-4 border border-red-600" @click="getNumber(0)">0</button>
      <div class="grid grid-flow-row grid-cols-3">
        <button class="px-4 border border-red-600 " @click="getNumber(Symbol)" v-for="Symbol in  nSymbols "
          :key="Symbol">{{
            Symbol }}</button>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue';

function getNumber(clickedValue) {
  if (clickedValue === "C") {
    expression.value = '';
    result.value = null;
  }
  else {
    expression.value += clickedValue
    console.log(clickedValue)
  }
}

const expression = ref('');
const result = ref(null);
const nSymbols = ref(['+', '-', '*', '/', 'C'])

// Identifying error and  showing it in the UI. While expression is watched then any changes 
// will be reflected to "result" and the eval funtion don't accept expression so it passes error. 
// If there are errors - it will update the result's value by null.
watch(expression, (newExpression) => {
  if (newExpression.trim() !== '') {
    try {
      result.value = eval(newExpression);
    } catch (error) {
      result.value = null;
    }
  } else {
    result.value = null;
  }
});
</script>
<style>
button {
  @apply hover:bg-slate-400 transition-all duration-300
}
</style>